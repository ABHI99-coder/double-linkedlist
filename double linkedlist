#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
    struct node *prev;
}*start=NULL,*end=NULL;
void create_list()
{
    struct node *new=(struct node *)malloc(sizeof(struct node));
    printf("enter the value for the node\n");
    scanf("%d",&new->data);
    struct node *temp;
    new->next=NULL;
    new->prev=NULL;
    if(start==NULL)
    {
        start=new;
        end=new;
    }
    else
    {
        temp=start;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        end->next=new;
        new->prev=end;
        end=new;
    }
}
void insert()
{
    int k,n=1;
    struct node *temp;
    struct node *new=(struct node *)malloc(sizeof(struct node));
    printf("enter the pos at which u want to enter\n");
    scanf("%d",&k);
    printf("enter the value of the node\n");
    scanf("%d",&new->data);
    temp=start;
    while(n<k-1)
    {
        temp=temp->next;
        n++;
    }
    new->next=temp->next;
    new->prev=temp;
    temp->next->prev=new;
    temp->next=new;
    
}
void delete()
{
    int k,n=1;
    struct node *t2,*t1;
    t1=t2=start;
    printf("enter the node pos\n");
    scanf("%d",&k);
    while(n<k)
    {
        t1=t2;
        t2=t2->next;
        n++;
    }
    t1->next=t2->next;
    t2->next->prev=t1;
    free(t2);
}
void display_forward()
{
    struct node *temp;
    if(start==NULL)
        {
            printf("\nList is empty:\n");
        }    
    else
    {
        temp=start;
        printf("\nThe List elements are:\n");
        while(temp!=NULL)
        {
            printf("%d\t",temp->data);
            temp=temp->next;
        }
    }
}
void display_reverse()
{
    struct node *temp;
    if(end==NULL)
        {
            printf("\nList is empty:\n");
        }    
    else
    {
        temp=end;
        printf("\nThe List elements are:\n");
        while(temp!=NULL)
        {
            printf("%d\t",temp->data);
            temp=temp->prev;
        }
    }
}
void insert_beg()
{
    struct node *new=(struct node *)malloc(sizeof(struct node));
    printf("enter the value of the node\n");
    scanf("%d",&new->data);
    new->prev=NULL;
    new->next=start;
    start->prev=new;
    start=new;
}
void insert_end()
{
    struct node *new=(struct node *)malloc(sizeof(struct node));
    printf("enter the value of the node\n");
    scanf("%d",&new->data);
    new->next=NULL;
    end->next=new;
    new->prev=end;
    end=new;
}
void delete_start()
{
    struct node *temp=start;
    start=start->next;
    start->prev=NULL;
    free(temp);
}
void delete_end()
{
    struct node *temp;
    temp=end;
    end=end->prev;
    end->next=NULL;
    free(temp);
}
int main()
{
    int ch;
    while(1)
    {
        printf("\n 1- create a list \n 2- display the list in forward manner \n 3- insert a node at a given pos\n 4- delete a node at a given pos\n 5- display in reverse order\n 6- insert at the beginning \n 7- insert at the end\n 8- delete node from the start \n 9- delete node at the end \n 10- exit from the menu driven \n");
        printf("enter the choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:create_list();
                    break;
            case 2:display_forward();
                    break;
            case 3:insert();
                    break;
            case 4:delete();
                    break;
            case 5:display_reverse();
                    break;
            case 6:insert_beg();
                    break;
            case 7:insert_end();
                    break;
            case 8:delete_start();
                    break;
            case 9:delete_end();
                    break;
            case 10:exit(0);
                    break;
            default:printf("wrong choice entered\n");
        }
    }
}
